{"version":3,"sources":["../../../__tests__/basic/List.ios.js"],"names":["pratik","require","sanket","jest","mock","Platform","requireActual","OS","it","datas","tree","renderer","create","data","toJSON","expect","toMatchSnapshot","backgroundColor","img","text","note"],"mappings":"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","file":"List.ios.js","sourcesContent":["import \"react-native\";\nimport React from \"react\";\nimport renderer from \"react-test-renderer\";\nimport { List } from \"./../../src/basic/List\";\nimport { ListItem } from \"./../../src/basic/ListItem\";\nimport { Left } from \"./../../src/basic/Left\";\nimport { Body } from \"./../../src/basic/Body\";\nimport { Right } from \"./../../src/basic/Right\";\nimport { Icon } from \"./../../src/basic/Icon\";\nimport { Text } from \"./../../src/basic/Text\";\nimport { Button } from \"./../../src/basic/Button\";\nimport { Switch } from \"./../../src/basic/Switch\";\nimport { Radio } from \"./../../src/basic/Radio\";\nimport { Badge } from \"./../../src/basic/Badge\";\nimport { Thumbnail } from \"./../../src/basic/Thumbnail\";\nimport { Separator } from \"./../../src/basic/Separator\";\n\n// Note: test renderer must be required after react-native.\n\nconst pratik = require(\"../assets/pratik.png\");\nconst sanket = require(\"../assets/sanket.png\");\n\njest.mock(\"Platform\", () => {\n  const Platform = require.requireActual(\"Platform\");\n  Platform.OS = \"ios\";\n  return Platform;\n});\n\nit(\"renders Basic List\", () => {\n  const datas = [\n    \"Simon Mignolet\",\n    \"Nathaniel Clyne\",\n    \"Dejan Lovren\",\n    \"Mama Sakho\",\n    \"Alberto Moreno\",\n    \"Emre Can\",\n    \"Joe Allen\",\n    \"Phil Coutinho\"\n  ];\n  const tree = renderer\n    .create(\n      <List\n        dataArray={datas}\n        renderRow={data => (\n          <ListItem>\n            <Left>\n              <Text>{data}</Text>\n            </Left>\n            <Right>\n              <Icon name=\"arrow-forward\" />\n            </Right>\n          </ListItem>\n        )}\n      />\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders ListItem selected\", () => {\n  const tree = renderer\n    .create(\n      <List>\n        <ListItem selected>\n          <Text>Caroline Aaron</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Urbino Cendre</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Lee Allen</Text>\n        </ListItem>\n      </List>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders ListItem itemDivider\", () => {\n  const tree = renderer\n    .create(\n      <List>\n        <ListItem itemDivider>\n          <Text>A</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Aaron Bennet</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Ali Connors</Text>\n        </ListItem>\n        <ListItem last>\n          <Text>Angana Ghosh</Text>\n        </ListItem>\n\n        <ListItem itemDivider>\n          <Text>B</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Bradley Horowitz</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Brian Swetland</Text>\n        </ListItem>\n        <ListItem last>\n          <Text>Brittany Kelso</Text>\n        </ListItem>\n      </List>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders ListItem itemHeader\", () => {\n  const tree = renderer\n    .create(\n      <List>\n        <ListItem itemHeader first>\n          <Text>COMEDY</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Hangover</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Horrible Bosses</Text>\n        </ListItem>\n        <ListItem last>\n          <Text>Cop Out</Text>\n        </ListItem>\n\n        <ListItem itemHeader>\n          <Text>HORROR</Text>\n        </ListItem>\n        <ListItem>\n          <Text>The Evil Dead</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Residential Evil</Text>\n        </ListItem>\n        <ListItem last>\n          <Text>Conjuring</Text>\n        </ListItem>\n      </List>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders ListItem icon\", () => {\n  const tree = renderer\n    .create(\n      <List>\n        <ListItem icon>\n          <Left>\n            <Button style={{ backgroundColor: \"#FF9501\" }}>\n              <Icon active name=\"plane\" />\n            </Button>\n          </Left>\n          <Body>\n            <Text>Airplane Mode</Text>\n          </Body>\n          <Right>\n            <Switch value={false} onTintColor=\"#50B948\" />\n          </Right>\n        </ListItem>\n        <ListItem icon>\n          <Left>\n            <Button style={{ backgroundColor: \"#007AFF\" }}>\n              <Icon active name=\"bluetooth\" />\n            </Button>\n          </Left>\n          <Body>\n            <Text>Bluetooth</Text>\n          </Body>\n          <Right>\n            <Text>On</Text>\n            <Icon active name=\"arrow-forward\" />\n          </Right>\n        </ListItem>\n        <ListItem icon>\n          <Left>\n            <Button style={{ backgroundColor: \"#4CDA64\" }}>\n              <Icon active name=\"phone-portrait\" />\n            </Button>\n          </Left>\n          <Body>\n            <Text>Mobile Data</Text>\n          </Body>\n          <Right>\n            <Radio selected />\n          </Right>\n        </ListItem>\n        <ListItem icon>\n          <Left>\n            <Button style={{ backgroundColor: \"#FD3C2D\" }}>\n              <Icon active name=\"notifications\" />\n            </Button>\n          </Left>\n          <Body>\n            <Text>Notifications</Text>\n          </Body>\n          <Right>\n            <Icon active name=\"arrow-forward\" />\n          </Right>\n        </ListItem>\n        <ListItem icon last>\n          <Left>\n            <Button style={{ backgroundColor: \"#5855D6\" }}>\n              <Icon active name=\"moon\" />\n            </Button>\n          </Left>\n          <Body>\n            <Text>Do Not Disturb</Text>\n          </Body>\n          <Right>\n            <Text>Yes</Text>\n          </Right>\n        </ListItem>\n        <ListItem last icon>\n          <Left>\n            <Button style={{ backgroundColor: \"#8F8E93\" }}>\n              <Icon active name=\"cog\" />\n            </Button>\n          </Left>\n          <Body>\n            <Text>Software Update</Text>\n          </Body>\n          <Right>\n            <Badge style={{ backgroundColor: \"#FD3C2D\" }}>\n              <Text>2</Text>\n            </Badge>\n          </Right>\n        </ListItem>\n      </List>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders ListItem avatar\", () => {\n  const datas = [\n    {\n      img: pratik,\n      text: \"Kumar Pratik\",\n      note: \"Its time to build a difference . .\"\n    },\n    {\n      img: sanket,\n      text: \"Kumar Sanket\",\n      note: \"One needs courage to be happy and smiling all time . . \"\n    }\n  ];\n  const tree = renderer\n    .create(\n      <List\n        dataArray={datas}\n        renderRow={data => (\n          <ListItem thumbnail>\n            <Left>\n              <Thumbnail square size={55} source={data.img} />\n            </Left>\n            <Body>\n              <Text>{data.text}</Text>\n              <Text numberOfLines={1} note>\n                {data.note}\n              </Text>\n            </Body>\n            <Right>\n              <Button transparent>\n                <Text>View</Text>\n              </Button>\n            </Right>\n          </ListItem>\n        )}\n      />\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders ListItem thumbnail\", () => {\n  const datas = [\n    {\n      img: pratik,\n      text: \"Kumar Pratik\",\n      note: \"Its time to build a difference . .\"\n    },\n    {\n      img: sanket,\n      text: \"Kumar Sanket\",\n      note: \"One needs courage to be happy and smiling all time . . \"\n    }\n  ];\n  const tree = renderer\n    .create(\n      <List\n        dataArray={datas}\n        renderRow={data => (\n          <ListItem thumbnail>\n            <Left>\n              <Thumbnail square size={55} source={data.img} />\n            </Left>\n            <Body>\n              <Text>{data.text}</Text>\n              <Text numberOfLines={1} note>\n                {data.note}\n              </Text>\n            </Body>\n            <Right>\n              <Button transparent>\n                <Text>View</Text>\n              </Button>\n            </Right>\n          </ListItem>\n        )}\n      />\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders ListItem separator\", () => {\n  const tree = renderer\n    .create(\n      <List>\n        <Separator bordered>\n          <Text>MIDFIELD</Text>\n        </Separator>\n        <ListItem>\n          <Text>Caroline Aaron</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Urbino Cendre</Text>\n        </ListItem>\n        <ListItem last>\n          <Text>Lee Allen</Text>\n        </ListItem>\n\n        <Separator bordered>\n          <Text>MIDFIELD</Text>\n        </Separator>\n        <ListItem>\n          <Text>Caroline Aaron</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Urbino Cendre</Text>\n        </ListItem>\n        <ListItem last>\n          <Text>Lee Allen</Text>\n        </ListItem>\n      </List>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders ListItem noIndent\", () => {\n  const tree = renderer\n    .create(\n      <List>\n        <ListItem\n          noIndent\n          style={{\n            backgroundColor: \"#cde1f9\"\n          }}\n        >\n          <Text>Caroline Aaron</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Urbino Cendre</Text>\n        </ListItem>\n        <ListItem>\n          <Text>Lee Allen</Text>\n        </ListItem>\n      </List>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n"]}