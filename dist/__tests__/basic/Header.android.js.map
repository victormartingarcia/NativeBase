{"version":3,"sources":["../../../__tests__/basic/Header.android.js"],"names":["jest","mock","Platform","require","requireActual","OS","it","tree","renderer","create","toJSON","expect","toMatchSnapshot","backgroundColor","color"],"mappings":"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","file":"Header.android.js","sourcesContent":["import \"react-native\";\nimport React from \"react\";\nimport renderer from \"react-test-renderer\";\nimport { Container } from \"./../../src/basic/Container\";\nimport { Header } from \"./../../src/basic/Header\";\nimport { Left } from \"./../../src/basic/Left\";\nimport { Button } from \"./../../src/basic/Button\";\nimport { Icon } from \"./../../src/basic/Icon\";\nimport { Body } from \"./../../src/basic/Body\";\nimport { Title } from \"./../../src/basic/Title\";\nimport { Subtitle } from \"./../../src/basic/Subtitle\";\nimport { Right } from \"./../../src/basic/Right\";\nimport { Content } from \"./../../src/basic/Content\";\nimport { Text } from \"./../../src/basic/Text\";\n\n// Note: test renderer must be required after react-native.\n\njest.mock(\"Platform\", () => {\n  const Platform = require.requireActual(\"Platform\");\n  Platform.OS = \"android\";\n  return Platform;\n});\n\nit(\"renders Header with only Title\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header>\n          <Left />\n          <Body>\n            <Title>Header</Title>\n          </Body>\n          <Right />\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Header with Icon Buttons\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header>\n          <Left>\n            <Button transparent>\n              <Icon name=\"arrow-back\" />\n            </Button>\n          </Left>\n          <Body>\n            <Title>Header</Title>\n          </Body>\n          <Right>\n            <Button transparent>\n              <Icon name=\"menu\" />\n            </Button>\n          </Right>\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Header with Text Buttons\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header>\n          <Left>\n            <Button hasText transparent>\n              <Text>Back</Text>\n            </Button>\n          </Left>\n          <Body>\n            <Title>Header</Title>\n          </Body>\n          <Right>\n            <Button hasText transparent>\n              <Text>Cancel</Text>\n            </Button>\n          </Right>\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Header with Icon Button & Text Button\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header>\n          <Left>\n            <Button transparent>\n              <Icon name=\"arrow-back\" />\n            </Button>\n          </Left>\n          <Body>\n            <Title>Header</Title>\n          </Body>\n          <Right>\n            <Button hasText transparent>\n              <Text>Cancel</Text>\n            </Button>\n          </Right>\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Header with Icon & Text Button\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header>\n          <Left>\n            <Button transparent>\n              <Icon name=\"arrow-back\" />\n              <Text>Back</Text>\n            </Button>\n          </Left>\n          <Body>\n            <Title>Header</Title>\n          </Body>\n          <Right>\n            <Button hasText transparent>\n              <Text>Cancel</Text>\n            </Button>\n          </Right>\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Header with multiple Icon Button\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header>\n          <Left>\n            <Button transparent>\n              <Icon name=\"arrow-back\" />\n            </Button>\n          </Left>\n          <Body>\n            <Title>Header</Title>\n          </Body>\n          <Right>\n            <Button transparent>\n              <Icon name=\"search\" />\n            </Button>\n            <Button transparent>\n              <Icon name=\"heart\" />\n            </Button>\n            <Button transparent>\n              <Icon name=\"more\" />\n            </Button>\n          </Right>\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Header with Title and Subtitle\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header hasSubtitle>\n          <Left>\n            <Button transparent>\n              <Icon name=\"arrow-back\" />\n            </Button>\n          </Left>\n          <Body>\n            <Title>Title</Title>\n            <Subtitle>Subtitle</Subtitle>\n          </Body>\n          <Right />\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Header with Custom background color\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header\n          style={{ backgroundColor: \"#dc4239\" }}\n          androidStatusBarColor=\"#dc2015\"\n          iosBarStyle=\"light-content\"\n        >\n          <Left>\n            <Button transparent>\n              <Icon name=\"arrow-back\" style={{ color: \"#FFF\" }} />\n            </Button>\n          </Left>\n          <Body>\n            <Title style={{ color: \"#FFF\" }}>Custom Header</Title>\n          </Body>\n          <Right />\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Header span\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header span>\n          <Left>\n            <Button transparent>\n              <Icon name=\"arrow-back\" />\n            </Button>\n          </Left>\n          <Body>\n            <Title>Header Span</Title>\n          </Body>\n          <Right />\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Header noShadow\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header noShadow>\n          <Left>\n            <Button transparent>\n              <Icon name=\"arrow-back\" />\n            </Button>\n          </Left>\n          <Body>\n            <Title>Header No Shadow</Title>\n          </Body>\n          <Right>\n            <Button transparent>\n              <Icon name=\"menu\" />\n            </Button>\n          </Right>\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Header noLeft\", () => {\n  const tree = renderer\n    .create(\n      <Container>\n        <Header noLeft>\n          <Left>\n            <Button hasText transparent>\n              <Text>Back</Text>\n            </Button>\n          </Left>\n          <Body>\n            <Title>Header</Title>\n          </Body>\n          <Right>\n            <Button hasText transparent>\n              <Text>Cancel</Text>\n            </Button>\n          </Right>\n        </Header>\n      </Container>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n"]}