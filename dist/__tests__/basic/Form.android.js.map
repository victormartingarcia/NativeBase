{"version":3,"sources":["../../../__tests__/basic/Form.android.js"],"names":["jest","mock","Platform","require","requireActual","OS","it","tree","renderer","create","toJSON","expect","toMatchSnapshot"],"mappings":"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","file":"Form.android.js","sourcesContent":["import \"react-native\";\nimport React from \"react\";\nimport renderer from \"react-test-renderer\";\nimport { Form } from \"./../../src/basic/Form\";\nimport { Item } from \"./../../src/basic/Item\";\nimport { Label } from \"./../../src/basic/Label\";\nimport { Input } from \"./../../src/basic/Input\";\nimport { Icon } from \"./../../src/basic/Icon\";\nimport { Textarea } from \"./../../src/basic/Textarea\";\n\n// Note: test renderer must be required after react-native.\n\njest.mock(\"Platform\", () => {\n  const Platform = require.requireActual(\"Platform\");\n  Platform.OS = \"android\";\n  return Platform;\n});\n\nit(\"renders Fixed Label Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item fixedLabel>\n          <Label>Username</Label>\n          <Input />\n        </Item>\n        <Item fixedLabel last>\n          <Label>Password</Label>\n          <Input secureTextEntry />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Inline Label Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item inlineLabel>\n          <Label>Username</Label>\n          <Input />\n        </Item>\n        <Item inlineLabel last>\n          <Label>Password</Label>\n          <Input secureTextEntry />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Floating Label Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item floatingLabel>\n          <Label>Username</Label>\n          <Input />\n        </Item>\n        <Item floatingLabel last>\n          <Label>Password</Label>\n          <Input secureTextEntry />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Placeholder Label Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item>\n          <Input placeholder=\"Username\" />\n        </Item>\n        <Item last>\n          <Input placeholder=\"Password\" secureTextEntry />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Stacked Label Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item stackedLabel>\n          <Label>Username</Label>\n          <Input />\n        </Item>\n        <Item stackedLabel last>\n          <Label>Password</Label>\n          <Input secureTextEntry />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Regular Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item regular>\n          <Input placeholder=\"Regular Textbox\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Underline Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item>\n          <Input placeholder=\"Underline Textbox\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Rounded Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item rounded>\n          <Input placeholder=\"Rounded Textbox\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Icon Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item>\n          <Icon active name=\"home\" />\n          <Input placeholder=\"Icon Textbox\" />\n        </Item>\n        <Item>\n          <Input placeholder=\"Icon Alignment in Textbox\" />\n          <Icon active name=\"swap\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Success Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item success>\n          <Input placeholder=\"Textbox with Success Input\" />\n          <Icon name=\"ios-checkmark-circle\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Error Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item error>\n          <Input placeholder=\"Textbox with Error Input\" />\n          <Icon name=\"ios-close-circle\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Disabled Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item disabled>\n          <Input disabled placeholder=\"Disabled Textbox\" />\n          <Icon name=\"ios-information-circle\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Textarea Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Textarea rowSpan={5} bordered placeholder=\"Textarea\" />\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n"]}