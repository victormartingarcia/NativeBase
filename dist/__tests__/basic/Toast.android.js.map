{"version":3,"sources":["../../../__tests__/basic/Toast.android.js"],"names":["cover","require","jest","mock","Platform","requireActual","OS","it","tree","renderer","create","Toast","show","text","buttonText","toJSON","expect","toMatchSnapshot","buttonTextStyle","color","buttonStyle","backgroundColor","duration","position","textStyle","type"],"mappings":"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","file":"Toast.android.js","sourcesContent":["import \"react-native\";\nimport React from \"react\";\nimport renderer from \"react-test-renderer\";\nimport { Content } from \"./../../src/basic/Content\";\nimport { Button } from \"./../../src/basic/Button\";\nimport { Toast } from \"./../../src/basic/Toast\";\nimport { Text } from \"./../../src/basic/Text\";\n\n// Note: test renderer must be required after react-native.\nconst cover = require(\"../assets/drawer-cover.png\");\n\njest.mock(\"Platform\", () => {\n  const Platform = require.requireActual(\"Platform\");\n  Platform.OS = \"android\";\n  return Platform;\n});\n\nit(\"renders default Toast\", () => {\n  const tree = renderer\n    .create(\n      <Button\n        onPress={() =>\n          Toast.show({\n            text: \"Wrong password!\",\n            buttonText: \"Okay\"\n          })\n        }\n      >\n        <Text>Toast</Text>\n      </Button>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Toast button style\", () => {\n  const tree = renderer\n    .create(\n      <Button\n        onPress={() =>\n          Toast.show({\n            text: \"Wrong password!\",\n            buttonText: \"Okay\",\n            buttonTextStyle: { color: \"#008000\" },\n            buttonStyle: { backgroundColor: \"#5cb85c\" }\n          })\n        }\n      >\n        <Text>Toast</Text>\n      </Button>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Toast with duration\", () => {\n  const tree = renderer\n    .create(\n      <Button\n        onPress={() =>\n          Toast.show({\n            text: \"Wrong password!\",\n            buttonText: \"Okay\",\n            duration: 3000\n          })\n        }\n      >\n        <Text>Toast</Text>\n      </Button>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Toast position\", () => {\n  const tree = renderer\n    .create(\n      <Content padder>\n        <Button\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\",\n              position: \"top\"\n            })\n          }\n        >\n          <Text>Top Toast</Text>\n        </Button>\n        <Button\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\",\n              position: \"bottom\"\n            })\n          }\n        >\n          <Text>Bottom Toast</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Toast Text style\", () => {\n  const tree = renderer\n    .create(\n      <Button\n        onPress={() =>\n          Toast.show({\n            text: \"Wrong password!\",\n            textStyle: { color: \"yellow\" },\n            buttonText: \"Okay\"\n          })\n        }\n      >\n        <Text>Toast</Text>\n      </Button>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Toast Type\", () => {\n  const tree = renderer\n    .create(\n      <Content padder>\n        <Button\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\"\n            })\n          }\n        >\n          <Text>Default Toast</Text>\n        </Button>\n        <Button\n          success\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\",\n              type: \"success\"\n            })\n          }\n        >\n          <Text>Success Toast</Text>\n        </Button>\n        <Button\n          warning\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\",\n              type: \"warning\"\n            })\n          }\n        >\n          <Text>Warning Toast</Text>\n        </Button>\n        <Button\n          danger\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\",\n              type: \"danger\"\n            })\n          }\n        >\n          <Text>Danger Toast</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n"]}